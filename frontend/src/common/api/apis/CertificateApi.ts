/* tslint:disable */
/* eslint-disable */
/**
 * CertificatesManagerApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificateDTO,
  CommentDTO,
  CreateCertificateDTO,
  CreateCommentDTO,
  TableCertificatesDTO,
  UpdateCertificateDTO,
} from '../models/index';
import {
    CertificateDTOFromJSON,
    CertificateDTOToJSON,
    CommentDTOFromJSON,
    CommentDTOToJSON,
    CreateCertificateDTOFromJSON,
    CreateCertificateDTOToJSON,
    CreateCommentDTOFromJSON,
    CreateCommentDTOToJSON,
    TableCertificatesDTOFromJSON,
    TableCertificatesDTOToJSON,
    UpdateCertificateDTOFromJSON,
    UpdateCertificateDTOToJSON,
} from '../models/index';

export interface CertificatesHandleCommentsPostRequest {
    handle: string;
    createCommentDTO?: CreateCommentDTO;
}

export interface CertificatesHandleDeleteRequest {
    handle: string;
}

export interface CertificatesHandleGetRequest {
    handle: string;
}

export interface CertificatesHandlePutRequest {
    handle: string;
    updateCertificateDTO?: UpdateCertificateDTO;
}

export interface CertificatesPostRequest {
    createCertificateDTO?: CreateCertificateDTO;
}

/**
 * 
 */
export class CertificateApi extends runtime.BaseAPI {

    /**
     */
    async certificatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TableCertificatesDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TableCertificatesDTOFromJSON));
    }

    /**
     */
    async certificatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TableCertificatesDTO>> {
        const response = await this.certificatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async certificatesHandleCommentsPostRaw(requestParameters: CertificatesHandleCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentDTO>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling certificatesHandleCommentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates/{handle}/comments`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentDTOToJSON(requestParameters['createCommentDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentDTOFromJSON(jsonValue));
    }

    /**
     */
    async certificatesHandleCommentsPost(requestParameters: CertificatesHandleCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentDTO> {
        const response = await this.certificatesHandleCommentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificatesHandleDeleteRaw(requestParameters: CertificatesHandleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling certificatesHandleDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certificatesHandleDelete(requestParameters: CertificatesHandleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certificatesHandleDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async certificatesHandleGetRaw(requestParameters: CertificatesHandleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateDTO>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling certificatesHandleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateDTOFromJSON(jsonValue));
    }

    /**
     */
    async certificatesHandleGet(requestParameters: CertificatesHandleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateDTO> {
        const response = await this.certificatesHandleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificatesHandlePutRaw(requestParameters: CertificatesHandlePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateDTO>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling certificatesHandlePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCertificateDTOToJSON(requestParameters['updateCertificateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateDTOFromJSON(jsonValue));
    }

    /**
     */
    async certificatesHandlePut(requestParameters: CertificatesHandlePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateDTO> {
        const response = await this.certificatesHandlePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async certificatesPostRaw(requestParameters: CertificatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCertificateDTOToJSON(requestParameters['createCertificateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateDTOFromJSON(jsonValue));
    }

    /**
     */
    async certificatesPost(requestParameters: CertificatesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateDTO> {
        const response = await this.certificatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
