/* tslint:disable */
/* eslint-disable */
/**
 * CertificatesManagerApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CertificateTypeDTO } from './CertificateTypeDTO';
import {
    CertificateTypeDTOFromJSON,
    CertificateTypeDTOFromJSONTyped,
    CertificateTypeDTOToJSON,
} from './CertificateTypeDTO';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';
import type { CommentDTO } from './CommentDTO';
import {
    CommentDTOFromJSON,
    CommentDTOFromJSONTyped,
    CommentDTOToJSON,
} from './CommentDTO';
import type { SupplierDTO } from './SupplierDTO';
import {
    SupplierDTOFromJSON,
    SupplierDTOFromJSONTyped,
    SupplierDTOToJSON,
} from './SupplierDTO';

/**
 * 
 * @export
 * @interface CertificateDTO
 */
export interface CertificateDTO {
    /**
     * 
     * @type {string}
     * @memberof CertificateDTO
     */
    handle?: string | null;
    /**
     * 
     * @type {SupplierDTO}
     * @memberof CertificateDTO
     */
    supplier?: SupplierDTO;
    /**
     * 
     * @type {CertificateTypeDTO}
     * @memberof CertificateDTO
     */
    certificateType?: CertificateTypeDTO;
    /**
     * 
     * @type {string}
     * @memberof CertificateDTO
     */
    validFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateDTO
     */
    validTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateDTO
     */
    document?: string | null;
    /**
     * 
     * @type {Array<CommentDTO>}
     * @memberof CertificateDTO
     */
    comments?: Array<CommentDTO> | null;
    /**
     * 
     * @type {Array<UserDTO>}
     * @memberof CertificateDTO
     */
    participants?: Array<UserDTO> | null;
}

/**
 * Check if a given object implements the CertificateDTO interface.
 */
export function instanceOfCertificateDTO(value: object): value is CertificateDTO {
    return true;
}

export function CertificateDTOFromJSON(json: any): CertificateDTO {
    return CertificateDTOFromJSONTyped(json, false);
}

export function CertificateDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'handle': json['handle'] == null ? undefined : json['handle'],
        'supplier': json['supplier'] == null ? undefined : SupplierDTOFromJSON(json['supplier']),
        'certificateType': json['certificateType'] == null ? undefined : CertificateTypeDTOFromJSON(json['certificateType']),
        'validFrom': json['validFrom'] == null ? undefined : json['validFrom'],
        'validTo': json['validTo'] == null ? undefined : json['validTo'],
        'document': json['document'] == null ? undefined : json['document'],
        'comments': json['comments'] == null ? undefined : ((json['comments'] as Array<any>).map(CommentDTOFromJSON)),
        'participants': json['participants'] == null ? undefined : ((json['participants'] as Array<any>).map(UserDTOFromJSON)),
    };
}

export function CertificateDTOToJSON(value?: CertificateDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'handle': value['handle'],
        'supplier': SupplierDTOToJSON(value['supplier']),
        'certificateType': CertificateTypeDTOToJSON(value['certificateType']),
        'validFrom': value['validFrom'],
        'validTo': value['validTo'],
        'document': value['document'],
        'comments': value['comments'] == null ? undefined : ((value['comments'] as Array<any>).map(CommentDTOToJSON)),
        'participants': value['participants'] == null ? undefined : ((value['participants'] as Array<any>).map(UserDTOToJSON)),
    };
}

